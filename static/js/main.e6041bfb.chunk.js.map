{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["defBgColor","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","predictColor","hexColor","color","hexToRgb","keys","map","key","index","toFixed","net","run","handleColorChange","e","bgColor","target","value","setState","fontColor","brain","NeuralNetwork","train","input","r","g","b","output","state","hex","replace","m","result","exec","parseInt","react_default","a","createElement","className","style","backgroundColor","type","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qQAIMA,UAAa,WAsEJC,cAnEb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAmCRQ,aAAe,SAACC,GACd,IAAIC,EAAQT,EAAKU,SAASF,GAI1B,OAHAP,OAAOU,KAAKF,GAAOG,IAAI,SAAUC,EAAKC,GACpCL,EAAMI,KAASJ,EAAMI,GAAO,KAAKE,QAAQ,KAEpCf,EAAKgB,IAAIC,IAAIR,GAAOA,MAAQ,GAAM,OAAS,QAzCjCT,EA4CnBkB,kBAAoB,SAACC,GACnB,IAAMC,EAAUD,EAAEE,OAAOC,MAEzBtB,EAAKuB,SAAS,CACZH,UACAI,UAAWxB,EAAKO,aAAaa,MA9C/BpB,EAAKgB,IAAM,IAAIS,IAAMC,cAErB1B,EAAKgB,IAAIW,MAAM,CACb,CAAEC,MAAO,CAAEC,EAAG,EAAKC,EAAG,EAAKC,EAAG,GAAOC,OAAQ,CAAEvB,MAAO,IACtD,CAAEmB,MAAO,CAAEC,EAAG,EAAKC,EAAG,EAAKC,EAAG,GAAOC,OAAQ,CAAEvB,MAAO,IACtD,CAAEmB,MAAO,CAAEC,EAAG,IAAMC,EAAG,GAAKC,EAAG,IAAOC,OAAQ,CAAEvB,MAAO,IACvD,CAAEmB,MAAO,CAAEC,EAAG,IAAMC,EAAG,IAAMC,EAAG,IAAOC,OAAQ,CAAEvB,MAAO,IACxD,CAAEmB,MAAO,CAAEC,EAAG,GAAKC,EAAG,GAAKC,EAAG,GAAOC,OAAQ,CAAEvB,MAAO,IACtD,CAAEmB,MAAO,CAAEC,EAAG,IAAMC,EAAG,IAAMC,EAAG,GAAOC,OAAQ,CAAEvB,MAAO,IACxD,CAAEmB,MAAO,CAAEC,EAAG,EAAKC,EAAG,GAAMC,EAAG,IAAQC,OAAQ,CAAEvB,MAAO,MAE1DT,EAAKiC,MAAQ,CACXb,QAASvB,EACT2B,UAAWxB,EAAKO,aAAaV,IAhBdG,wEAqBTkC,GAGRA,EAAMA,EAAIC,QADW,mCACa,SAAUC,EAAGP,EAAGC,EAAGC,GACnD,OAAOF,EAAIA,EAAIC,EAAIA,EAAIC,EAAIA,IAG7B,IAAIM,EAAS,4CAA4CC,KAAKJ,GAC9D,OAAOG,EAAS,CACdR,EAAGU,SAASF,EAAO,GAAI,IACvBP,EAAGS,SAASF,EAAO,GAAI,IACvBN,EAAGQ,SAASF,EAAO,GAAI,KACzB,sCAqBA,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMC,MAAO,CAAEC,gBAAiB1C,KAAK8B,MAAMb,QAASX,MAAON,KAAK8B,MAAMT,YACnFgB,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,+BADF,SAGEF,EAAAC,EAAAC,cAAA,SAAOI,KAAK,QAAQC,SAAW5C,KAAKe,kBAAoBI,MAAQnB,KAAK8B,MAAMb,QAAUwB,MAAO,CAAEC,gBAAiB1C,KAAK8B,MAAMT,sBA7DlHwB,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e6041bfb.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport brain from 'brain.js';\nimport './App.css';\n\nconst defBgColor = \"#000000\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.net = new brain.NeuralNetwork();\n\n    this.net.train([\n      { input: { r: 0.0, g: 0.0, b: 0.0 }, output: { color: 1 } },\n      { input: { r: 1.0, g: 1.0, b: 1.0 }, output: { color: 0 } },\n      { input: { r: 0.03, g: 0.7, b: 0.5 }, output: { color: 0 } },\n      { input: { r: 0.16, g: 0.09, b: 0.2 }, output: { color: 1 } },\n      { input: { r: 0.5, g: 0.5, b: 1.0 }, output: { color: 1 } },\n      { input: { r: 0.07, g: 0.34, b: 0.0 }, output: { color: 1 } },\n      { input: { r: 1.0, g: 0.50, b: 0.50 }, output: { color: 0 } }]);\n    \n    this.state = {\n      bgColor: defBgColor,\n      fontColor: this.predictColor(defBgColor)\n    };\n\n  }\n\n  hexToRgb (hex) {\n    // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\n    var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n    hex = hex.replace(shorthandRegex, function (m, r, g, b) {\n      return r + r + g + g + b + b;\n    });\n  \n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n      r: parseInt(result[1], 16),\n      g: parseInt(result[2], 16),\n      b: parseInt(result[3], 16) } :\n    null;\n  }\n\n  predictColor = (hexColor) => {\n    var color = this.hexToRgb(hexColor);\n    Object.keys(color).map(function (key, index) {\n      color[key] = +(color[key] / 255).toFixed(2);\n    });\n    return this.net.run(color).color > 0.5 ? \"#fff\" : \"#000\";\n  };\n\n  handleColorChange = (e) => {\n    const bgColor = e.target.value;\n\n    this.setState({\n      bgColor,\n      fontColor: this.predictColor(bgColor)\n    });\n  };\n\n  render () {\n    return (\n      <div className=\"App\" style={{ backgroundColor: this.state.bgColor, color: this.state.fontColor }}>\n        <h1>Text Contrast</h1>\n        <div>\n          <span>Choose a color:</span>\n          &ensp;\n          <input type=\"color\" onChange={ this.handleColorChange } value={ this.state.bgColor } style={{ backgroundColor: this.state.fontColor }} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}